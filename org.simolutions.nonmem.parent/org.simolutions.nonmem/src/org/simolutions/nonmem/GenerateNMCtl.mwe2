module org.simolutions.nonmem.GenerateNMCtl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.simolutions.nonmem"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language=StandardLanguage {
			name = "org.simolutions.nonmem.NMCtl"
			fileExtensions = "ctl,mod"

			referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
			parserGenerator = {
				combinedGrammar = false
				options = {
					
				}
			}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
					lexerGrammar = "org.simolutions.nonmem.parser.antlr.lexer.CustomNMCtlLexer"
					runtime = true
					antlrParam = "-lib"
					antlrParam = "${rootPath}/org.simolutions.nonmem/src-gen/org/simolutions/nonmem/parser/antlr/lexer"
				}
			}
		}
		/*
		language = XtextGeneratorLanguage {
			name = "org.simolutions.nonmem.NMCtl"
			fileExtensions = "ctl,mod"

			referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			fragment = grammarAccess.GrammarAccessFragment2 {}
			fragment = ecore.EMFGeneratorFragment2 {}
			fragment = serializer.SerializerFragment2 {}
			fragment = resourceFactory.ResourceFactoryFragment2 {}
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
					lexerGrammar = "org.simolutions.nonmem.parser.lexer.CustomNMCtlLexer"
					runtime = true
//					antlrParam = "-lib"
//					antlrParam = "${rootPath}/org.simolutions.nonmem/src-gen/org/simolutions/nonmem/parser/lexer"
				}
			}
			
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
//			fragment = build.NMTranAntlrGeneratorFragment {
				combinedGrammar=false
				debugGrammar=true
			}
			fragment = validation.ValidatorFragment2 {}
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}
			fragment = generator.GeneratorFragment2 {}
			fragment = formatting.Formatter2Fragment2 {}
			fragment = ui.labeling.LabelProviderFragment2 {}
			fragment = ui.outline.QuickOutlineFragment2 {}
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			fragment = ui.quickfix.QuickfixProviderFragment2 {}
			fragment = ui.contentAssist.ContentAssistFragment2 {}
			fragment = junit.Junit4Fragment2 {}
			fragment = ui.refactoring.RefactorElementNameFragment2 {}
			fragment = types.TypesGeneratorFragment2 {}
			fragment = xbase.XtypeGeneratorFragment2 {}
			fragment = xbase.XbaseGeneratorFragment2 {}
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
			fragment = ui.compare.CompareFragment2 {}
			fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
			fragment = idea.IdeaPluginGenerator {}
//			fragment = web.WebIntegrationFragment {
//				framework = "Ace"
//			}
			//fragment = ui.projectWizard.TemplateProjectWizardFragment {}
			//fragment = ui.fileWizard.TemplateFileWizardFragment {}
		}
		*/
	}
}
